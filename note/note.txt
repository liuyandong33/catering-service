{"id":"1222507828638127147","orderId":"1222507828638127147","address":"上海交通大学(闵行校区)1001","createdAt":"2018-07-10T21:25:21","activeAt":"2018-07-10T21:25:21","deliverFee":5.3,"deliverTime":null,"description":"","groups":[{"name":"1号篮子","type":"normal","items":[{"id":1364161354,"skuId":200000168101182637,"name":"中辣","categoryId":1,"price":10.0,"quantity":2,"total":20.0,"additions":[],"newSpecs":[],"attributes":[],"extendCode":"","barCode":"","weight":1.0,"userPrice":0.0,"shopPrice":0.0,"vfoodId":1343931759}]}],"invoice":null,"book":false,"onlinePaid":true,"railwayAddress":null,"phoneList":["13789871965"],"shopId":150894532,"shopName":"智汇_饿了么订单测试店铺","daySn":2,"status":"unprocessed","refundStatus":"noRefund","userId":195365009,"userIdStr":"195365009","totalPrice":15.31,"originalPrice":25.3,"consignee":"刘**","deliveryGeo":"121.43521942,31.01870991","deliveryPoiAddress":"上海交通大学(闵行校区)1001","invoiced":false,"income":5.01,"serviceRate":0.18,"serviceFee":-5.0,"hongbao":0.0,"packageFee":0.0,"activityTotal":-9.99,"shopPart":-9.99,"elemePart":-0.0,"downgraded":false,"vipDeliveryFeeDiscount":0.0,"openId":"201234Z1398","secretPhoneExpireTime":"2018-07-11T00:25:20","orderActivities":[{"categoryId":11,"name":"单品定价","amount":-9.99,"elemePart":0.0,"restaurantPart":-9.99,"familyPart":0.0,"id":1293759106,"orderAllPartiesPartList":[{"partName":"商家补贴","partAmount":"9.99"}]}],"invoiceType":null,"taxpayerId":"","coldBoxFee":0.0,"cancelOrderDescription":null,"cancelOrderCreatedAt":null,"orderCommissions":[],"baiduWaimai":false,"userExtraInfo":{"giverPhone":"","greeting":"","remark":"","invoiceTitle":null},"consigneePhones":[]}

master 节点
http.cors.enabled: true
http.cors.allow-origin: "*"

cluster.name: wali
node.name: master
node.master: true
network.host: 127.0.0.1

slave1 节点
http.cors.enabled: true
http.cors.allow-origin: "*"

cluster.name: wali
node.name: slave1
network.host: 127.0.0.1
discovery.zen.ping.unicast.hosts: ["127.0.0.1"]

slave2 节点
http.cors.enabled: true
http.cors.allow-origin: "*"

cluster.name: wali
node.name: slave1
network.host: 127.0.0.1
discovery.zen.ping.unicast.hosts: ["127.0.0.1"]

{
    "goods": {
        "properties": {
            "id": {
                "type": "long"
            },
            "tenantId": {
                "type": "long"
            },
            "tenantCode": {
                "type": "keyword"
            },
            "branchId": {
                "type": "long"
            },
            "name": {
                "type": "text"
            },
            "type": {
                "type": "integer"
            },
            "categoryId": {
                "type": "long"
            },
            "categoryName": {
                "type": "text"
            },
            "imageUrl": {
                "type": "text"
            },
            "stocked": {
                "type": "boolean"
            },
            "createdTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            },
            "createdUserId": {
                "type": "long"
            },
            "updatedTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            },
            "updatedUserId": {
                "type": "long"
            },
            "updatedRemark": {
                "type": "text"
            },
            "deletedTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            },
            "deleted": {
                "type": "boolean"
            }
        }
    }
}

{
    "branch": {
        "properties": {
            "id": {
                "type": "long"
            },
            "tenantId": {
                "type": "long"
            },
            "tenantCode": {
                "type": "keyword"
            },
            "code": {
                "type": "text"
            },
            "name": {
                "type": "text"
            },
            "type": {
                "type": "integer"
            },
            "status": {
                "type": "integer"
            },
            "provinceCode": {
                "type": "text"
            },
            "provinceName": {
                "type": "text"
            },
            "cityCode": {
                "type": "text"
            },
            "cityName": {
                "type": "text"
            },
            "districtCode": {
                "type": "text"
            },
            "districtName": {
                "type": "text"
            },
            "address": {
                "type": "text"
            },
            "longitude": {
                "type": "text"
            },
            "latitude": {
                "type": "text"
            },
            "linkman": {
                "type": "text"
            },
            "contactPhone": {
                "type": "text"
            },
            "elemeAccountType": {
                "type": "integer"
            },
            "shopId": {
                "type": "long"
            },
            "smartRestaurantStatus": {
                "type": "integer"
            },
            "appAuthToken": {
                "type": "text"
            },
            "poiId": {
                "type": "text"
            },
            "poiName": {
                "type": "text"
            },
            "vipGroupId": {
                "type": "long"
            },
            "businessTimes": {
                "type": "text"
            },
            "createdTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            },
            "createdUserId": {
                "type": "long"
            },
            "updatedTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            },
            "updatedUserId": {
                "type": "long"
            },
            "updatedRemark": {
                "type": "text"
            },
            "deletedTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            },
            "deleted": {
                "type": "boolean"
            }
        }
    }
}

{
    "name": "排骨米饭",
    "type": 1,
    "categoryId": 1,
    "imageUrl": "https://www.baidu.com",
    "stocked": true,
    "goodsSpecificationInfos": [
        {
            "name": "小份",
            "price": 15,
            "stock": 50
        },
        {
            "name": "大份",
            "price": 17,
            "stock": 100
        },
        {
            "name": "超大份",
            "price": 21,
            "stock": 150
        }
    ],
    "attributeGroupInfos": [
        {
            "name": "辣度",
            "attributeInfos": [
                {
                    "name": "微辣"
                },
                {
                    "name": "中辣"
                },
                {
                    "name": "麻辣"
                }
            ]
        },
        {
            "name": "甜度",
            "attributeInfos": [
                {
                    "name": "微甜"
                },
                {
                    "name": "中甜"
                },
                {
                    "name": "超甜"
                }
            ]
        }
    ]
}

@Transactional(rollbackFor = Exception.class)
public ApiRest saveDietOrder(SaveDietOrderModel saveDietOrderModel) {
    BigInteger tenantId = saveDietOrderModel.getTenantId();
    String tenantCode = saveDietOrderModel.getTenantCode();
    BigInteger branchId = saveDietOrderModel.getBranchId();
    BigInteger userId = saveDietOrderModel.getUserId();
    BigInteger vipId = saveDietOrderModel.getVipId();

    // 查询出门店信息
    Branch branch = DatabaseHelper.find(Branch.class, branchId);
    ValidateUtils.notNull(branch, "门店不存在！");

    List<BigInteger> goodsIds = new ArrayList<BigInteger>();
    List<BigInteger> packageIds = new ArrayList<BigInteger>();
    List<BigInteger> goodsSpecificationIds = new ArrayList<BigInteger>();
    List<BigInteger> goodsAttributeGroupIds = new ArrayList<BigInteger>();
    List<BigInteger> goodsAttributeIds = new ArrayList<BigInteger>();
    List<SaveDietOrderModel.GoodsInfo> goodsInfos = saveDietOrderModel.getGoodsInfos();
    for (SaveDietOrderModel.GoodsInfo goodsInfo : goodsInfos) {
        BigInteger goodsId = goodsInfo.getGoodsId();
        goodsIds.add(goodsInfo.getGoodsId());
        goodsSpecificationIds.add(goodsInfo.getGoodsSpecificationId());
        if (goodsInfo.isPackage()) {
            packageIds.add(goodsId);
        }

        List<SaveDietOrderModel.AttributeInfo> attributeInfos = goodsInfo.getAttributeInfos();
        if (CollectionUtils.isNotEmpty(attributeInfos)) {
            for (SaveDietOrderModel.AttributeInfo attributeInfo : attributeInfos) {
                goodsAttributeGroupIds.add(attributeInfo.getAttributeGroupId());
                goodsAttributeIds.add(attributeInfo.getAttributeId());
            }
        }
    }

    List<Map<String, Object>> optionalGroupInfos = new ArrayList<Map<String, Object>>();
    List<Map<String, Object>> requiredGroupInfos = new ArrayList<Map<String, Object>>();
    if (CollectionUtils.isNotEmpty(packageIds)) {
        optionalGroupInfos = goodsMapper.listPackageInfos(packageIds, 1);
        requiredGroupInfos = goodsMapper.listPackageInfos(packageIds, 2);
    }

    Map<String, Map<String, Object>> optionalGroupInfoMap = new HashMap<String, Map<String, Object>>();
    for (Map<String, Object> packageInfo : optionalGroupInfos) {
        String key = MapUtils.getString(packageInfo, "packageId") + "_" + MapUtils.getString(packageInfo, "packageGroupId") + "_" + MapUtils.getString(packageInfo, "goodsId") + "_" + MapUtils.getString(packageInfo, "goodsSpecificationId");
        optionalGroupInfoMap.put(key, packageInfo);
    }

    Map<BigInteger, List<Map<String, Object>>> requiredGroupInfoMap = new HashMap<BigInteger, List<Map<String, Object>>>();
    for (Map<String, Object> packageInfo : requiredGroupInfos) {
        BigInteger packageId = BigInteger.valueOf(MapUtils.getLongValue(packageInfo, "packageId"));
        List<Map<String, Object>> packageInfos = requiredGroupInfoMap.get(packageId);
        if (CollectionUtils.isEmpty(packageInfos)) {
            packageInfos = new ArrayList<Map<String, Object>>();
            requiredGroupInfoMap.put(packageId, packageInfos);
        }
        packageInfos.add(packageInfo);
    }

    // 查询出订单中包含的所有商品
    List<Goods> goodses = new ArrayList<Goods>();
    if (CollectionUtils.isNotEmpty(goodsIds)) {
        goodses = goodsMapper.findAllByIdInList(tenantId, branchId, goodsIds);
    }

    // 查询出订单中包含的所有商品规格
    List<GoodsSpecification> goodsSpecifications = new ArrayList<GoodsSpecification>();
    if (CollectionUtils.isNotEmpty(goodsSpecificationIds)) {
        SearchModel goodsSpecificationSearchModel = new SearchModel(true);
        goodsSpecificationSearchModel.addSearchCondition("tenant_id", Constants.SQL_OPERATION_SYMBOL_EQUAL, tenantId);
        goodsSpecificationSearchModel.addSearchCondition("branch_id", Constants.SQL_OPERATION_SYMBOL_EQUAL, branchId);
        goodsSpecificationSearchModel.addSearchCondition("id", Constants.SQL_OPERATION_SYMBOL_IN, goodsSpecificationIds);
        goodsSpecifications = DatabaseHelper.findAll(GoodsSpecification.class, goodsSpecificationSearchModel);
    }

    // 查询出订单中包含的所有口味组
    List<GoodsAttributeGroup> goodsAttributeGroups = new ArrayList<GoodsAttributeGroup>();
    if (CollectionUtils.isNotEmpty(goodsAttributeGroupIds)) {
        SearchModel goodsAttributeGroupSearchModel = new SearchModel(true);
        goodsAttributeGroupSearchModel.addSearchCondition("tenant_id", Constants.SQL_OPERATION_SYMBOL_EQUAL, tenantId);
        goodsAttributeGroupSearchModel.addSearchCondition("branch_id", Constants.SQL_OPERATION_SYMBOL_EQUAL, branchId);
        goodsAttributeGroupSearchModel.addSearchCondition("id", Constants.SQL_OPERATION_SYMBOL_IN, goodsAttributeGroupIds);
        goodsAttributeGroups = DatabaseHelper.findAll(GoodsAttributeGroup.class, goodsAttributeGroupSearchModel);
    }

    // 查询出订单中包含的所有口味
    List<GoodsAttribute> goodsAttributes = new ArrayList<GoodsAttribute>();
    if (CollectionUtils.isNotEmpty(goodsAttributeIds)) {
        SearchModel goodsAttributeSearchModel = new SearchModel(true);
        goodsAttributeSearchModel.addSearchCondition("tenant_id", Constants.SQL_OPERATION_SYMBOL_EQUAL, tenantId);
        goodsAttributeSearchModel.addSearchCondition("branch_id", Constants.SQL_OPERATION_SYMBOL_EQUAL, branchId);
        goodsAttributeSearchModel.addSearchCondition("id", Constants.SQL_OPERATION_SYMBOL_IN, goodsAttributeIds);
        goodsAttributes = DatabaseHelper.findAll(GoodsAttribute.class, goodsAttributeSearchModel);
    }

    // 封装商品id与商品之间的map
    Map<BigInteger, Goods> goodsMap = new HashMap<BigInteger, Goods>();
    for (Goods goods : goodses) {
        goodsMap.put(goods.getId(), goods);
    }

    // 封装商品规格id与商品规格之间的map
    Map<BigInteger, GoodsSpecification> goodsSpecificationMap = new HashMap<BigInteger, GoodsSpecification>();
    for (GoodsSpecification goodsSpecification : goodsSpecifications) {
        goodsSpecificationMap.put(goodsSpecification.getId(), goodsSpecification);
    }

    // 封装商品口味组id与商品口味组之间的map
    Map<BigInteger, GoodsAttributeGroup> goodsAttributeGroupMap = new HashMap<BigInteger, GoodsAttributeGroup>();
    for (GoodsAttributeGroup goodsAttributeGroup : goodsAttributeGroups) {
        goodsAttributeGroupMap.put(goodsAttributeGroup.getId(), goodsAttributeGroup);
    }

    // 封装商品口味id与商品口味之间的map
    Map<BigInteger, GoodsAttribute> goodsAttributeMap = new HashMap<BigInteger, GoodsAttribute>();
    for (GoodsAttribute goodsAttribute : goodsAttributes) {
        goodsAttributeMap.put(goodsAttribute.getId(), goodsAttribute);
    }

    String orderNumberPrefix = null;
    Integer orderType = saveDietOrderModel.getOrderType();
    if (orderType == DietOrderConstants.ORDER_TYPE_SCAN_CODE_ORDER) {
        orderNumberPrefix = "SC";
    }

    Integer daySerialNumber = SequenceUtils.nextValue(SerialNumberGenerator.generatorTodaySequenceName(tenantId, branchId, "diet_order_number"));
    String orderNumber = SerialNumberGenerator.nextOrderNumber(orderNumberPrefix, 8, daySerialNumber);

    DietOrder.Builder builder = DietOrder.builder()
            .tenantId(tenantId)
            .tenantCode(tenantCode)
            .branchId(branchId)
            .orderNumber(orderNumber)
            .orderType(orderType)
            .orderStatus(DietOrderConstants.ORDER_STATUS_PENDING)
            .payStatus(DietOrderConstants.PAY_STATUS_UNPAID)
            .refundStatus(DietOrderConstants.REFUND_STATUS_NO_REFUND)
            .daySerialNumber(daySerialNumber.toString());

    boolean invoiced = saveDietOrderModel.getInvoiced();
    builder.invoiced(invoiced);
    if (invoiced) {
        builder.invoiceType(saveDietOrderModel.getInvoiceType()).invoice(saveDietOrderModel.getInvoice());
    }
    if (vipId != null) {
        builder.vipId(vipId);
    } else {
        builder.vipId(Constants.BIGINT_DEFAULT_VALUE);
    }
    builder.createdUserId(userId).updatedUserId(userId).updatedRemark("保存订单信息！");

    DietOrder dietOrder = builder.build();
    DatabaseHelper.insert(dietOrder);

    BigDecimal dietOrderTotalAmount = BigDecimal.ZERO;
    BigDecimal deliverFee = BigDecimal.TEN;
    BigDecimal packageFee = BigDecimal.TEN;
    BigInteger dietOrderId = dietOrder.getId();

    // 存放订单优惠金额
    BigDecimal dietOrderDiscountAmount = BigDecimal.ZERO;
    // 用来保存订单活动

    List<EffectiveActivity> effectiveActivities = activityMapper.listEffectiveActivities(tenantId, branchId);
    List<EffectiveActivity> fullReductionActivities = new ArrayList<EffectiveActivity>();
    List<EffectiveActivity> paymentActivities = new ArrayList<EffectiveActivity>();
    Map<String, EffectiveActivity> effectiveActivityMap = new HashMap<String, EffectiveActivity>();
    for (EffectiveActivity effectiveActivity : effectiveActivities) {
        int type = effectiveActivity.getType();
        if (type == 1 || type == 3) {
            effectiveActivityMap.put(effectiveActivity.getGoodsId() + "_" + effectiveActivity.getGoodsSpecificationId(), effectiveActivity);
        } else if (type == 2) {
            fullReductionActivities.add(effectiveActivity);
        } else if (type == 4) {
            paymentActivities.add(effectiveActivity);
        }
    }

    List<DietOrderDetail> dietOrderDetails = new ArrayList<DietOrderDetail>();
    Map<String, DietOrderDetail> dietOrderDetailMap = new HashMap<String, DietOrderDetail>();
    Map<String, List<DietOrderDetailGoodsAttribute>> dietOrderDetailGoodsAttributeMap = new HashMap<String, List<DietOrderDetailGoodsAttribute>>();
    Map<BigInteger, DietOrderActivity> dietOrderActivityMap = new HashMap<BigInteger, DietOrderActivity>();

    DietOrderGroup discountDietOrderGroup = null;
    DietOrderGroup normalDietOrderGroup = DietOrderGroup.builder()
            .tenantId(tenantId)
            .tenantCode(tenantCode)
            .branchId(branchId)
            .dietOrderId(dietOrderId)
            .name("正常的菜品")
            .type(DietOrderConstants.GROUP_TYPE_NORMAL)
            .createdUserId(userId)
            .updatedUserId(userId)
            .updatedRemark("保存订单分组信息！")
            .build();
    DatabaseHelper.insert(normalDietOrderGroup);

    for (SaveDietOrderModel.GoodsInfo goodsInfo : goodsInfos) {
        Goods goods = goodsMap.get(goodsInfo.getGoodsId());
        ValidateUtils.notNull(goods, "商品不存在！");

        GoodsSpecification goodsSpecification = goodsSpecificationMap.get(goodsInfo.getGoodsSpecificationId());
        ValidateUtils.notNull(goodsSpecification, "商品规格不存在！");

        BigInteger goodsId = goods.getId();
        BigInteger goodsSpecificationId = goodsSpecification.getId();
        String goodsSpecificationName = goodsSpecification.getName();
        BigDecimal quantity = goodsInfo.getQuantity();
        BigDecimal price = goodsSpecification.getPrice();
        if (goods.isStocked()) {
            GoodsUtils.deductingGoodsStock(goodsId, goodsSpecificationId, quantity);
        }

        if (goodsInfo.isPackage()) {
            List<SaveDietOrderModel.PackageInfo> infos = goodsInfo.getPackageInfos();
            for (SaveDietOrderModel.PackageInfo info : infos) {
                for (SaveDietOrderModel.Detail detail : info.getDetails()) {
                    Map<String, Object> packageInfo = optionalGroupInfoMap.get(goodsId + "_" + info.getGroupId() + "_" + detail.getGoodsId() + "_" + detail.getGoodsSpecificationId());
                    ValidateUtils.notNull(packageInfo, "套餐明细不存在！");
                    DietOrderDetail dietOrderDetail = DietOrderDetail.builder()
                            .tenantId(tenantId)
                            .tenantCode(tenantCode)
                            .branchId(branchId)
                            .dietOrderId(dietOrderId)
                            .dietOrderGroupId(normalDietOrderGroup.getId())
                            .goodsType(Constants.GOODS_TYPE_PACKAGE_DETAIL)
                            .goodsId(BigInteger.valueOf(MapUtils.getLongValue(packageInfo, "goodsId")))
                            .goodsName(MapUtils.getString(packageInfo, "goodsName"))
                            .goodsSpecificationId(BigInteger.valueOf(MapUtils.getLong(packageInfo, "goodsSpecificationId")))
                            .goodsSpecificationName(MapUtils.getString(packageInfo, "goodsSpecificationName"))
                            .packageId(BigInteger.valueOf(MapUtils.getLongValue(packageInfo, "packageId")))
                            .packageGroupId(BigInteger.valueOf(MapUtils.getLongValue(packageInfo, "packageGroupId")))
                            .packageGroupName(MapUtils.getString(packageInfo, "packageGroupName"))
                            .categoryId(goods.getCategoryId())
                            .categoryName(goods.getCategoryName())
                            .price(price)
                            .attributeIncrease(BigDecimal.ZERO)
                            .quantity(detail.getQuantity().multiply(quantity))
                            .totalAmount(BigDecimal.ZERO)
                            .discountAmount(BigDecimal.ZERO)
                            .payableAmount(BigDecimal.ZERO)
                            .createdUserId(userId)
                            .updatedUserId(userId)
                            .build();
                    dietOrderDetails.add(dietOrderDetail);
                }
            }
            List<Map<String, Object>> packageInfos = requiredGroupInfoMap.get(goodsId);
            for (Map<String, Object> packageInfo : packageInfos) {
                DietOrderDetail dietOrderDetail = DietOrderDetail.builder()
                        .tenantId(tenantId)
                        .tenantCode(tenantCode)
                        .branchId(branchId)
                        .dietOrderId(dietOrderId)
                        .dietOrderGroupId(normalDietOrderGroup.getId())
                        .goodsType(Constants.GOODS_TYPE_PACKAGE_DETAIL)
                        .goodsId(BigInteger.valueOf(MapUtils.getLongValue(packageInfo, "goodsId")))
                        .goodsName(MapUtils.getString(packageInfo, "goodsName"))
                        .goodsSpecificationId(BigInteger.valueOf(MapUtils.getLong(packageInfo, "goodsSpecificationId")))
                        .goodsSpecificationName(MapUtils.getString(packageInfo, "goodsSpecificationName"))
                        .packageId(BigInteger.valueOf(MapUtils.getLongValue(packageInfo, "packageId")))
                        .packageGroupId(BigInteger.valueOf(MapUtils.getLongValue(packageInfo, "packageGroupId")))
                        .packageGroupName(MapUtils.getString(packageInfo, "packageGroupName"))
                        .categoryId(goods.getCategoryId())
                        .categoryName(goods.getCategoryName())
                        .price(price)
                        .attributeIncrease(BigDecimal.ZERO)
                        .quantity(quantity.multiply(BigDecimal.valueOf(MapUtils.getDoubleValue(packageInfo, "quantity"))))
                        .totalAmount(BigDecimal.ZERO)
                        .discountAmount(BigDecimal.ZERO)
                        .payableAmount(BigDecimal.ZERO)
                        .createdUserId(userId)
                        .updatedUserId(userId)
                        .build();
                dietOrderDetails.add(dietOrderDetail);
            }
        }

        String uuid = UUID.randomUUID().toString();
        BigDecimal attributeIncrease = BigDecimal.ZERO;
        List<SaveDietOrderModel.AttributeInfo> attributeInfos = goodsInfo.getAttributeInfos();

        List<DietOrderDetailGoodsAttribute> dietOrderDetailGoodsAttributes = new ArrayList<DietOrderDetailGoodsAttribute>();
        if (CollectionUtils.isNotEmpty(attributeInfos)) {
            for (SaveDietOrderModel.AttributeInfo attributeInfo : attributeInfos) {
                GoodsAttributeGroup goodsAttributeGroup = goodsAttributeGroupMap.get(attributeInfo.getAttributeGroupId());
                ValidateUtils.notNull(goodsAttributeGroup, "口味组不存在！");

                GoodsAttribute goodsAttribute = goodsAttributeMap.get(attributeInfo.getAttributeId());
                ValidateUtils.notNull(goodsAttribute, "口味不存在！");
                attributeIncrease = attributeIncrease.add(goodsAttribute.getPrice());

                DietOrderDetailGoodsAttribute dietOrderDetailGoodsAttribute = DietOrderDetailGoodsAttribute.builder()
                        .tenantId(tenantId)
                        .tenantCode(tenantCode)
                        .branchId(branchId)
                        .dietOrderId(dietOrderId)
                        .dietOrderGroupId(normalDietOrderGroup.getId())
                        .dietOrderDetailId(null)
                        .goodsAttributeGroupId(goodsAttributeGroup.getId())
                        .goodsAttributeGroupName(goodsAttributeGroup.getName())
                        .goodsAttributeId(goodsAttribute.getId())
                        .goodsAttributeName(goodsAttribute.getName())
                        .price(goodsAttribute.getPrice())
                        .createdUserId(userId)
                        .updatedUserId(userId)
                        .build();
                dietOrderDetailGoodsAttributes.add(dietOrderDetailGoodsAttribute);
                dietOrderDetailGoodsAttributeMap.put(uuid, dietOrderDetailGoodsAttributes);
            }
        }

        DietOrderDetail dietOrderDetail = null;
        // 开始处理促销活动
        EffectiveActivity effectiveActivity = effectiveActivityMap.get(goodsId + "_" + goodsSpecificationId);
        if (effectiveActivity != null) {
            int type = effectiveActivity.getType();
            // 买A赠B活动
            if (type == 1) {
                if (quantity.compareTo(effectiveActivity.getBuyQuantity()) >= 0) {
                    if (discountDietOrderGroup == null) {
                        discountDietOrderGroup = DietOrderGroup.builder()
                                .tenantId(tenantId)
                                .tenantCode(tenantCode)
                                .branchId(branchId)
                                .dietOrderId(dietOrderId)
                                .name("赠送的菜品")
                                .type(DietOrderConstants.GROUP_TYPE_DISCOUNT)
                                .createdUserId(userId)
                                .updatedUserId(userId)
                                .updatedRemark("保存订单分组信息！")
                                .build();
                        DatabaseHelper.insert(discountDietOrderGroup);
                    }
                    BigDecimal giveQuantity = quantity.divide(effectiveActivity.getBuyQuantity(), 0, BigDecimal.ROUND_DOWN).multiply(effectiveActivity.getGiveQuantity());
                    BigDecimal giveTotalAmount = giveQuantity.multiply(effectiveActivity.getSpecialPrice());
                    DietOrderDetail giveDietOrderDetail = DietOrderDetail.builder()
                            .tenantId(tenantId)
                            .tenantCode(tenantCode)
                            .branchId(branchId)
                            .dietOrderId(dietOrderId)
                            .dietOrderGroupId(discountDietOrderGroup.getId())
                            .goodsType(Constants.GOODS_TYPE_ORDINARY_GOODS)
                            .goodsId(effectiveActivity.getGiveGoodsId())
                            .goodsName(effectiveActivity.getGiveGoodsName())
                            .goodsSpecificationId(effectiveActivity.getGoodsSpecificationId())
                            .goodsSpecificationName(effectiveActivity.getGoodsSpecificationName())
                            .categoryId(effectiveActivity.getCategoryId())
                            .categoryName(effectiveActivity.getCategoryName())
                            .price(BigDecimal.ZERO)
                            .attributeIncrease(BigDecimal.ZERO)
                            .quantity(effectiveActivity.getGiveQuantity())
                            .totalAmount(giveTotalAmount)
                            .discountAmount(giveTotalAmount)
                            .payableAmount(BigDecimal.ZERO)
                            .createdUserId(userId)
                            .updatedUserId(userId)
                            .build();
                    dietOrderDetails.add(giveDietOrderDetail);

                    BigInteger activityId = effectiveActivity.getActivityId();
                    DietOrderActivity dietOrderActivity = dietOrderActivityMap.get(activityId);
                    if (dietOrderActivity == null) {
                        dietOrderActivity = DietOrderActivity.builder()
                                .tenantId(tenantId)
                                .tenantCode(tenantCode)
                                .branchId(branchId)
                                .dietOrderId(dietOrderId)
                                .activityId(activityId)
                                .activityName(effectiveActivity.getName())
                                .activityType(type)
                                .amount(giveDietOrderDetail.getDiscountAmount())
                                .createdUserId(userId)
                                .updatedUserId(userId)
                                .build();
                        dietOrderActivityMap.put(activityId, dietOrderActivity);
                    } else {
                        dietOrderActivity.setAmount(dietOrderActivity.getAmount().add(giveDietOrderDetail.getDiscountAmount()));
                    }
                }

                BigDecimal dietOrderDetailTotalAmount = price.add(attributeIncrease).multiply(quantity);
                dietOrderDetail = DietOrderDetail.builder()
                        .tenantId(tenantId)
                        .tenantCode(tenantCode)
                        .branchId(branchId)
                        .dietOrderId(dietOrderId)
                        .dietOrderGroupId(normalDietOrderGroup.getId())
                        .goodsType(goods.getType())
                        .goodsId(goodsId)
                        .goodsName(goods.getName())
                        .goodsSpecificationId(goodsSpecificationId)
                        .goodsSpecificationName(goodsSpecificationName)
                        .categoryId(goods.getCategoryId())
                        .categoryName(goods.getCategoryName())
                        .price(price)
                        .attributeIncrease(attributeIncrease)
                        .quantity(quantity)
                        .totalAmount(dietOrderDetailTotalAmount)
                        .discountAmount(BigDecimal.ZERO)
                        .payableAmount(dietOrderDetailTotalAmount)
                        .createdUserId(userId)
                        .updatedUserId(userId)
                        .build();
            }

            if (type == 3) {
                Integer discountType = effectiveActivity.getDiscountType();
                BigDecimal dietOrderDetailTotalAmount = price.add(attributeIncrease).multiply(quantity);
                BigDecimal dietOrderDetailPayableAmount = null;
                if (discountType == 1) {
                    dietOrderDetailPayableAmount = effectiveActivity.getSpecialPrice().add(attributeIncrease).multiply(quantity);
                } else {
                    dietOrderDetailPayableAmount = price.subtract(price.multiply(effectiveActivity.getDiscountRate()).add(attributeIncrease).divide(Constants.BIG_DECIMAL_ONE_HUNDRED));
                }
                BigDecimal dietOrderDetailDiscountAmount = dietOrderDetailTotalAmount.subtract(dietOrderDetailPayableAmount);
                dietOrderTotalAmount = dietOrderTotalAmount.add(dietOrderDetailTotalAmount);
                dietOrderDiscountAmount = dietOrderDiscountAmount.add(dietOrderDetailDiscountAmount);
                dietOrderDetail = DietOrderDetail.builder()
                        .tenantId(tenantId)
                        .tenantCode(tenantCode)
                        .branchId(branchId)
                        .dietOrderId(dietOrderId)
                        .dietOrderGroupId(normalDietOrderGroup.getId())
                        .goodsType(goods.getType())
                        .goodsId(goodsId)
                        .goodsName(goods.getName())
                        .goodsSpecificationId(goodsSpecificationId)
                        .goodsSpecificationName(goodsSpecificationName)
                        .categoryId(goods.getCategoryId())
                        .categoryName(goods.getCategoryName())
                        .price(price)
                        .attributeIncrease(attributeIncrease)
                        .quantity(quantity)
                        .totalAmount(dietOrderDetailTotalAmount)
                        .discountAmount(dietOrderDetailDiscountAmount)
                        .payableAmount(dietOrderDetailPayableAmount)
                        .createdUserId(userId)
                        .updatedUserId(userId)
                        .build();

                BigInteger activityId = effectiveActivity.getActivityId();
                DietOrderActivity dietOrderActivity = dietOrderActivityMap.get(activityId);
                if (dietOrderActivity == null) {
                    dietOrderActivity = DietOrderActivity.builder()
                            .tenantId(tenantId)
                            .tenantCode(tenantCode)
                            .branchId(branchId)
                            .dietOrderId(dietOrderId)
                            .activityId(activityId)
                            .activityName(effectiveActivity.getName())
                            .activityType(type)
                            .amount(dietOrderDetailDiscountAmount)
                            .createdUserId(userId)
                            .updatedUserId(userId)
                            .build();

                    dietOrderActivityMap.put(activityId, dietOrderActivity);
                } else {
                    dietOrderActivity.setAmount(dietOrderActivity.getAmount().add(dietOrderDetailDiscountAmount));
                }
            }
        } else {
            BigDecimal dietOrderDetailTotalAmount = price.add(attributeIncrease).multiply(quantity);
            dietOrderTotalAmount = dietOrderTotalAmount.add(dietOrderDetailTotalAmount);
            dietOrderDetail = DietOrderDetail.builder()
                    .tenantId(tenantId)
                    .tenantCode(tenantCode)
                    .branchId(branchId)
                    .dietOrderId(dietOrderId)
                    .dietOrderGroupId(normalDietOrderGroup.getId())
                    .goodsType(goods.getType())
                    .goodsId(goodsId)
                    .goodsName(goods.getName())
                    .goodsSpecificationId(goodsSpecificationId)
                    .goodsSpecificationName(goodsSpecificationName)
                    .categoryId(goods.getCategoryId())
                    .categoryName(goods.getCategoryName())
                    .price(price)
                    .attributeIncrease(attributeIncrease)
                    .quantity(quantity)
                    .totalAmount(dietOrderDetailTotalAmount)
                    .discountAmount(BigDecimal.ZERO)
                    .payableAmount(dietOrderDetailTotalAmount)
                    .createdUserId(userId)
                    .updatedUserId(userId)
                    .build();
        }

        dietOrderDetails.add(dietOrderDetail);
        dietOrderDetailMap.put(uuid, dietOrderDetail);
        packageFee = packageFee.add(BigDecimal.ZERO);
    }

    // 开始处理配送费与打包费
    DietOrderGroup extraDietOrderGroup = null;
    if (deliverFee.compareTo(BigDecimal.ZERO) > 0) {
        if (extraDietOrderGroup == null) {
            extraDietOrderGroup = DietOrderGroup.builder()
                    .tenantId(tenantId)
                    .tenantCode(tenantCode)
                    .branchId(branchId)
                    .dietOrderId(dietOrderId)
                    .name("其他费用")
                    .type(DietOrderConstants.GROUP_TYPE_EXTRA)
                    .createdUserId(userId)
                    .updatedUserId(userId)
                    .updatedRemark("保存订单分组信息！")
                    .build();
            DatabaseHelper.insert(extraDietOrderGroup);
        }
        dietOrderTotalAmount = dietOrderTotalAmount.add(deliverFee);
        DietOrderDetail dietOrderDetail = DietOrderDetail.builder()
                .tenantId(tenantId)
                .tenantCode(tenantCode)
                .branchId(branchId)
                .dietOrderId(dietOrderId)
                .dietOrderGroupId(extraDietOrderGroup.getId())
                .goodsType(Constants.GOODS_TYPE_DELIVER_FEE)
                .goodsId(Constants.BIG_INTEGER_MINUS_ONE)
                .goodsName("配送费")
                .goodsSpecificationId(Constants.BIG_INTEGER_MINUS_ONE)
                .goodsSpecificationName(Constants.VARCHAR_DEFAULT_VALUE)
                .categoryId(Constants.FICTITIOUS_GOODS_CATEGORY_ID)
                .categoryName(Constants.FICTITIOUS_GOODS_CATEGORY_NAME)
                .price(deliverFee)
                .attributeIncrease(BigDecimal.ZERO)
                .quantity(BigDecimal.ONE)
                .totalAmount(deliverFee)
                .discountAmount(BigDecimal.ZERO)
                .payableAmount(deliverFee)
                .createdUserId(userId)
                .updatedUserId(userId)
                .build();
        dietOrderDetails.add(dietOrderDetail);
    }

    if (packageFee.compareTo(BigDecimal.ZERO) > 0) {
        if (extraDietOrderGroup == null) {
            extraDietOrderGroup = DietOrderGroup.builder()
                    .tenantId(tenantId)
                    .tenantCode(tenantCode)
                    .branchId(branchId)
                    .dietOrderId(dietOrderId)
                    .name("其他费用")
                    .type(DietOrderConstants.GROUP_TYPE_EXTRA)
                    .createdUserId(userId)
                    .updatedUserId(userId)
                    .updatedRemark("保存订单分组信息！")
                    .build();
            DatabaseHelper.insert(extraDietOrderGroup);
        }
        dietOrderTotalAmount = dietOrderTotalAmount.add(packageFee);
        DietOrderDetail dietOrderDetail = DietOrderDetail.builder()
                .tenantId(tenantId)
                .tenantCode(tenantCode)
                .branchId(branchId)
                .dietOrderId(dietOrderId)
                .dietOrderGroupId(extraDietOrderGroup.getId())
                .goodsType(Constants.GOODS_TYPE_PACKAGE_FEE)
                .goodsId(Constants.BIG_INTEGER_MINUS_TWO)
                .goodsName("打包费")
                .goodsSpecificationId(Constants.BIG_INTEGER_MINUS_TWO)
                .goodsSpecificationName(Constants.VARCHAR_DEFAULT_VALUE)
                .categoryId(Constants.FICTITIOUS_GOODS_CATEGORY_ID)
                .categoryName(Constants.FICTITIOUS_GOODS_CATEGORY_NAME)
                .price(packageFee)
                .attributeIncrease(BigDecimal.ZERO)
                .quantity(BigDecimal.ONE)
                .totalAmount(packageFee)
                .discountAmount(BigDecimal.ZERO)
                .payableAmount(packageFee)
                .createdUserId(userId)
                .updatedUserId(userId)
                .build();
        dietOrderDetails.add(dietOrderDetail);
    }

    DatabaseHelper.insertAll(dietOrderDetails);

    if (MapUtils.isNotEmpty(dietOrderDetailGoodsAttributeMap)) {
        List<DietOrderDetailGoodsAttribute> dietOrderDetailGoodsAttributes = new ArrayList<DietOrderDetailGoodsAttribute>();
        for (Map.Entry<String, List<DietOrderDetailGoodsAttribute>> entry : dietOrderDetailGoodsAttributeMap.entrySet()) {
            String key = entry.getKey();
            DietOrderDetail dietOrderDetail = dietOrderDetailMap.get(key);
            BigInteger dietOrderDetailId = dietOrderDetail.getId();

            List<DietOrderDetailGoodsAttribute> value = entry.getValue();
            for (DietOrderDetailGoodsAttribute dietOrderDetailGoodsAttribute : value) {
                dietOrderDetailGoodsAttribute.setDietOrderDetailId(dietOrderDetailId);
                dietOrderDetailGoodsAttributes.add(dietOrderDetailGoodsAttribute);
            }
        }
        DatabaseHelper.insertAll(dietOrderDetailGoodsAttributes);
    }

    // 整单优惠活动

    BigDecimal dietOrderPayableAmount = dietOrderTotalAmount.subtract(dietOrderDiscountAmount);
    List<DietOrderActivity> dietOrderActivities = new ArrayList<DietOrderActivity>();
    if (CollectionUtils.isNotEmpty(fullReductionActivities)) {
        Collections.sort(fullReductionActivities, (o1, o2) -> o1.getTotalAmount().compareTo(o2.getTotalAmount()));

        EffectiveActivity fullReductionActivity = null;
        int size = fullReductionActivities.size();
        if (dietOrderPayableAmount.compareTo(fullReductionActivities.get(0).getTotalAmount()) < 0) {

        } else if (dietOrderPayableAmount.compareTo(fullReductionActivities.get(size - 1).getTotalAmount()) >= 0) {
            fullReductionActivity = fullReductionActivities.get(size - 1);
        } else {
            for (int index = 0; index < size - 1; index++) {
                EffectiveActivity prevEffectiveActivity = fullReductionActivities.get(index);
                EffectiveActivity nextEffectiveActivity = fullReductionActivities.get(index + 1);
                if (dietOrderPayableAmount.compareTo(prevEffectiveActivity.getTotalAmount()) >= 0 && dietOrderPayableAmount.compareTo(nextEffectiveActivity.getTotalAmount()) < 0) {
                    fullReductionActivity = prevEffectiveActivity;
                }
            }
        }
        if (fullReductionActivity != null) {
            BigDecimal amount = null;
            int discountType = fullReductionActivity.getDiscountType();
            if (discountType == 1) {
                amount = fullReductionActivity.getDiscountAmount();
            } else {
                amount = dietOrderPayableAmount.subtract(dietOrderPayableAmount.multiply(fullReductionActivity.getDiscountRate()).divide(Constants.BIG_DECIMAL_ONE_HUNDRED));
            }
            dietOrderDiscountAmount = dietOrderDiscountAmount.add(amount);
            DietOrderActivity dietOrderActivity = DietOrderActivity.builder()
                    .tenantId(tenantId)
                    .tenantCode(tenantCode)
                    .branchId(branchId)
                    .dietOrderId(dietOrderId)
                    .activityId(fullReductionActivity.getActivityId())
                    .activityName(fullReductionActivity.getName())
                    .activityType(fullReductionActivity.getType())
                    .amount(amount)
                    .createdUserId(userId)
                    .updatedUserId(userId)
                    .build();
            dietOrderActivities.add(dietOrderActivity);
        }
    }
    if (MapUtils.isNotEmpty(dietOrderActivityMap)) {
        dietOrderActivities.addAll(dietOrderActivityMap.values());
    }

    if (CollectionUtils.isNotEmpty(dietOrderActivities)) {
        DatabaseHelper.insertAll(dietOrderActivities);
    }

    dietOrder.setTotalAmount(dietOrderTotalAmount);
    dietOrder.setDiscountAmount(dietOrderDiscountAmount);
    dietOrder.setPayableAmount(dietOrderTotalAmount.subtract(dietOrderDiscountAmount));
    dietOrder.setPaidAmount(BigDecimal.ZERO);
    DatabaseHelper.update(dietOrder);

    return ApiRest.builder().data(dietOrder).message("保存订单成功！").successful(true).build();
}